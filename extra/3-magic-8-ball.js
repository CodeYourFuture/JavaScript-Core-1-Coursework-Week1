/**

  Let's peer into the future using a Magic 8 Ball!
  https://en.wikipedia.org/wiki/Magic_8-Ball 

  There are a few steps to being able view the future though:
  * Ask a question
  * Shake the ball
  * Get an answer
  * Decide if it's positive or negative

  The question can be anything, but the answers are fixed,
  and have different levels of positivity or negativity.

  Below are the possible answers:

  ##Â Very positive
    It is certain.
    It is decidedly so.
    Without a doubt.
    Yes - definitely.
    You may rely on it.

  ## Positive
    As I see it, yes.
    Most likely.
    Outlook good.
    Yes.
    Signs point to yes.

  ## Negative
    Reply hazy, try again.
    Ask again later.
    Better not tell you now.
    Cannot predict now.
    Concentrate and ask again.

  ## Very negative
    Don't count on it.
    My reply is no.
    My sources say no.
    Outlook not so good.
    Very doubtful.
*/

const answersObject = {
  // key value pair for each set of answers where the value is an array of the possible answers
  veryPositiveAnswers: [
    "It is certain.",
    "It is decidedly so.",
    "Without a doubt.",
    "Yes - definitely.",
    "You may rely on it.",
  ],

  positiveAnswers: [
    "As I see it, yes.",
    "Most likely.",
    "Outlook good.",
    "Yes.",
    "Signs point to yes.",
  ],

  negativeAnswers: [
    "Reply hazy, try again.",
    "Ask again later.",
    "Better not tell you now.",
    "Cannot predict now.",
    "Concentrate and ask again.",
  ],

  veryNegativeAnswers: [
    "Don't count on it.",
    "My reply is no.",
    "My sources say no.",
    "Outlook not so good.",
    "Very doubtful.",
  ],
};

// This should log "The ball has shaken!"
// and return the answer.
function shakeBall() {
  console.log("The ball has shaken!");

  // choose what array inside the object to pick from. This works by making an array of values using the Object.keys() function - which returns an array. Then picking a random index from that using the Math.floor() function to make a random number between 0 and the length of the array generated by Object.keys - by using Math.random().

  const arrayToPickFrom =
    Object.keys(answersObject)[
      Math.floor(Math.random() * Object.keys(answersObject).length)
    ];

  // pick an index using the const above then the same random generation method using Math.floor/random
  const arrayIndexToPickFrom = Math.floor(
    Math.random() * answersObject[arrayToPickFrom].length
  );

  // the answer is first assigned to a key in the object using the above variable
  const answer = answersObject[arrayToPickFrom];
  // then from that array value we use the arrayIndex variable to pick what specific string to use
  return answer[arrayIndexToPickFrom];
}

console.log(shakeBall());

/* 
  This function should say whether the answer it is given is
    - very positive
    - positive
    - negative
    - very negative

  This function should expect to be called with any value which was returned by the shakeBall function.
*/
function checkAnswer(answer) {}

/* 
==================================
======= TESTS - DO NOT MODIFY =====

There are some Tests in this file that will help you work out if your code is working.

To run these tests type `npm run extraTo run the tests for just this one file, type `npm run extra-tests -- --testPathPattern 3-magic-8-ball` into your terminal
(Reminder: You must have run `npm install` one time before this will work!)
==================================
*/

// test("whole magic 8 ball sequence", () => {
//   const consoleLogSpy = jest.spyOn(global.console, "log");
//   const answer = shakeBall();

//   expect(typeof answer).toEqual("string");

//   expect(consoleLogSpy).toHaveBeenCalledTimes(1);
//   expect(consoleLogSpy).toHaveBeenLastCalledWith("The ball has shaken!");

//   expect(checkAnswer(answer)).toBeOneOf([
//     "very positive",
//     "positive",
//     "negative",
//     "very negative",
//   ]);
// });

// test("magic 8 ball returns different values each time", () => {
//   const seenAnswers = new Set();
//   for (let i = 0; i < 10; ++i) {
//     seenAnswers.add(shakeBall());
//   }
//   if (seenAnswers.size < 2) {
//     throw Error(
//       "Expected to get different random answers each time shakeBall was called, but always got the same one"
//     );
//   }

//   let seenPositivities = new Set(
//     Array.from(seenAnswers.values()).map(checkAnswer)
//   );
//   if (seenPositivities.size < 2) {
//     throw Error(
//       "Expected to random answers with different positivities each time shakeBall was called, but always got the same one"
//     );
//   }
// });

// test("checkAnswer works for `It is decidedly so.`", () => {
//   expect(checkAnswer("It is decidedly so.")).toEqual("very positive");
// });

// test("checkAnswer works for `My reply is no.`", () => {
//   expect(checkAnswer("My reply is no.")).toEqual("very negative");
// });
